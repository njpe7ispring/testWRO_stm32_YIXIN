[1/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/testWRO.c.obj
[2/9] Performing build step for 'bootloader'
[1/1] cd /home/xuhui/esp32/my_project/testWRO/build/bootloader/esp-idf/esptool_py && /home/xuhui/.espressif/python_env/idf5.2_py3.8_env/bin/python /home/xuhui/esp32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 /home/xuhui/esp32/my_project/testWRO/build/bootloader/bootloader.bin
Bootloader binary size 0x5240 bytes. 0x2dc0 bytes (36%) free.
[3/7] Linking C static library esp-idf/main/libmain.a
[4/7] Generating ld/sections.ld
[5/7] Linking CXX executable testWRO.elf
[6/7] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated /home/xuhui/esp32/my_project/testWRO/build/testWRO.bin
[7/7] cd /home/xuhui/esp32/my_project/testWRO/build/esp-idf/esptool_py && /home/xuhui/.espressif/python_env/idf5.2_py3.8_env/bin/python /home/xuhui/esp32/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/xuhui/esp32/my_project/testWRO/build/partition_table/partition-table.bin /home/xuhui/esp32/my_project/testWRO/build/testWRO.bin
testWRO.bin binary size 0x3f560 bytes. Smallest app partition is 0x100000 bytes. 0xc0aa0 bytes (75%) free.
